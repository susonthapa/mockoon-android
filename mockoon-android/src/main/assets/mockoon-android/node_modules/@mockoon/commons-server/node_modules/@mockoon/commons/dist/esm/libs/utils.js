/**
 * Extract the content-type from an array of headers
 *
 * @param headers
 */
export const GetContentType = (headers) => {
    const contentTypeHeader = headers.find((header) => header.key.toLowerCase() === 'content-type');
    if (contentTypeHeader) {
        return contentTypeHeader.value;
    }
    return null;
};
/**
 * Return a route response's content-type.
 * Environment's content-type is overridden by route's content-type
 *
 * @param environment
 * @param routeResponse
 */
export const GetRouteResponseContentType = (environment, routeResponse) => {
    const routeResponseContentType = GetContentType(routeResponse.headers);
    const environmentContentType = GetContentType(environment.headers);
    return routeResponseContentType || environmentContentType || '';
};
/**
 * Test if URL is valid
 *
 * @param URL
 */
export const IsValidURL = (address) => {
    try {
        const myURL = new URL(address);
        return true;
    }
    catch (e) {
        return false;
    }
};
/**
 * Test a header validity
 *
 * @param headerName
 */
export const TestHeaderValidity = (headerName) => {
    if (headerName &&
        headerName.match(/[^A-Za-z0-9\-\!\#\$\%\&\'\*\+\.\^\_\`\|\~]/g)) {
        return true;
    }
    return false;
};
//# sourceMappingURL=utils.js.map