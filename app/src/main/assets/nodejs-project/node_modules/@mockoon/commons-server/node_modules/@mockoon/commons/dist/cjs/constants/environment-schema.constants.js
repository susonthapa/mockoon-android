"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentSchema = exports.RouteSchema = exports.HeaderDefault = exports.ResponseRuleDefault = exports.RouteResponseDefault = exports.RouteDefault = exports.EnvironmentDefault = void 0;
const Joi = __importStar(require("joi"));
const uuid_1 = require("uuid");
const migrations_1 = require("../libs/migrations");
exports.EnvironmentDefault = {
    get uuid() {
        return uuid_1.v4();
    },
    lastMigration: migrations_1.HighestMigrationId,
    name: 'New environment',
    endpointPrefix: '',
    latency: 0,
    port: 3000,
    hostname: '0.0.0.0',
    routes: [],
    proxyMode: false,
    proxyHost: '',
    proxyRemovePrefix: false,
    https: false,
    cors: true,
    headers: [],
    proxyReqHeaders: [],
    proxyResHeaders: []
};
exports.RouteDefault = {
    get uuid() {
        return uuid_1.v4();
    },
    documentation: '',
    method: 'get',
    endpoint: '',
    responses: [],
    enabled: true,
    randomResponse: false,
    sequentialResponse: false
};
exports.RouteResponseDefault = {
    get uuid() {
        return uuid_1.v4();
    },
    body: '{}',
    latency: 0,
    statusCode: 200,
    label: '',
    headers: [],
    filePath: '',
    sendFileAsBody: false,
    rules: [],
    rulesOperator: 'OR',
    disableTemplating: false,
    fallbackTo404: false
};
exports.ResponseRuleDefault = {
    target: 'body',
    modifier: '',
    value: '',
    isRegex: false
};
exports.HeaderDefault = {
    key: '',
    value: ''
};
const UUIDSchema = Joi.string()
    .uuid()
    .failover(() => uuid_1.v4())
    .required();
const HeaderSchema = Joi.object({
    key: Joi.string().allow('').required(),
    value: Joi.string().allow('').required()
});
exports.RouteSchema = Joi.object({
    uuid: UUIDSchema,
    documentation: Joi.string()
        .allow('')
        .failover(exports.RouteDefault.documentation)
        .required(),
    method: Joi.string()
        .valid('get', 'post', 'put', 'patch', 'delete', 'head', 'options')
        .failover(exports.RouteDefault.method)
        .required(),
    endpoint: Joi.string().allow('').failover(exports.RouteDefault.endpoint).required(),
    responses: Joi.array()
        .items(Joi.object({
        uuid: UUIDSchema,
        body: Joi.string()
            .allow('')
            .failover(exports.RouteResponseDefault.body)
            .required(),
        latency: Joi.number()
            .min(0)
            .failover(exports.RouteResponseDefault.latency)
            .required(),
        statusCode: Joi.number()
            .min(100)
            .max(999)
            .failover(exports.RouteResponseDefault.statusCode)
            .required(),
        label: Joi.string()
            .allow('')
            .failover(exports.RouteResponseDefault.label)
            .required(),
        headers: Joi.array()
            .items(HeaderSchema, Joi.any().strip())
            .failover(exports.RouteResponseDefault.headers)
            .required(),
        filePath: Joi.string()
            .allow('')
            .failover(exports.RouteResponseDefault.filePath)
            .required(),
        sendFileAsBody: Joi.boolean()
            .failover(exports.RouteResponseDefault.sendFileAsBody)
            .required(),
        rules: Joi.array()
            .items(Joi.object({
            target: Joi.string()
                .valid('body', 'query', 'header', 'params', 'request_number')
                .failover(exports.ResponseRuleDefault.target)
                .required(),
            modifier: Joi.string()
                .allow('')
                .failover(exports.ResponseRuleDefault.modifier)
                .required(),
            value: Joi.string()
                .allow('')
                .failover(exports.ResponseRuleDefault.value)
                .required(),
            isRegex: Joi.boolean()
                .failover(exports.ResponseRuleDefault.isRegex)
                .required()
        }), Joi.any().strip())
            .failover(exports.RouteResponseDefault.rules)
            .required(),
        rulesOperator: Joi.string()
            .valid('OR', 'AND')
            .failover(exports.RouteResponseDefault.rulesOperator)
            .required(),
        disableTemplating: Joi.boolean()
            .failover(exports.RouteResponseDefault.disableTemplating)
            .required(),
        fallbackTo404: Joi.boolean()
            .failover(exports.RouteResponseDefault.fallbackTo404)
            .required()
    }), Joi.any().strip())
        .failover(exports.RouteDefault.responses)
        .required(),
    enabled: Joi.boolean().failover(exports.RouteDefault.enabled).required(),
    randomResponse: Joi.boolean()
        .failover(exports.RouteDefault.randomResponse)
        .required(),
    sequentialResponse: Joi.boolean()
        .failover(exports.RouteDefault.sequentialResponse)
        .required()
});
exports.EnvironmentSchema = Joi.object({
    uuid: UUIDSchema,
    lastMigration: Joi.number()
        .failover(exports.EnvironmentDefault.lastMigration)
        .required(),
    name: Joi.string().allow('').failover(exports.EnvironmentDefault.name).required(),
    endpointPrefix: Joi.string()
        .allow('')
        .failover(exports.EnvironmentDefault.endpointPrefix)
        .required(),
    latency: Joi.number().min(0).failover(exports.EnvironmentDefault.latency).required(),
    port: Joi.number()
        .min(0)
        .max(65535)
        .failover(exports.EnvironmentDefault.port)
        .required(),
    hostname: Joi.string().failover(exports.EnvironmentDefault.hostname).required(),
    routes: Joi.array()
        .items(exports.RouteSchema, Joi.any().strip())
        .failover(exports.EnvironmentDefault.routes)
        .required(),
    proxyMode: Joi.boolean().failover(exports.EnvironmentDefault.proxyMode).required(),
    proxyHost: Joi.string()
        .allow('')
        .failover(exports.EnvironmentDefault.proxyHost)
        .required(),
    proxyRemovePrefix: Joi.boolean()
        .failover(exports.EnvironmentDefault.proxyRemovePrefix)
        .required(),
    https: Joi.boolean().failover(exports.EnvironmentDefault.https).required(),
    cors: Joi.boolean().failover(exports.EnvironmentDefault.cors).required(),
    headers: Joi.array()
        .items(HeaderSchema, Joi.any().strip())
        .failover(exports.EnvironmentDefault.headers)
        .required(),
    proxyReqHeaders: Joi.array()
        .items(HeaderSchema, Joi.any().strip())
        .failover(exports.EnvironmentDefault.proxyReqHeaders)
        .required(),
    proxyResHeaders: Joi.array()
        .items(HeaderSchema, Joi.any().strip())
        .failover(exports.EnvironmentDefault.proxyResHeaders)
        .required()
})
    .failover(exports.EnvironmentDefault)
    .default(exports.EnvironmentDefault)
    .options({ stripUnknown: true });
//# sourceMappingURL=environment-schema.constants.js.map