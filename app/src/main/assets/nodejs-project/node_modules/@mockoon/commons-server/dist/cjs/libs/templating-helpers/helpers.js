"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helpers = void 0;
const bson_objectid_1 = __importDefault(require("bson-objectid"));
const date_fns_1 = require("date-fns");
const faker_1 = __importDefault(require("faker"));
const handlebars_1 = require("handlebars");
const os_1 = require("os");
const utils_1 = require("../utils");
/**
 * Handlebars may insert its own `options` object as the last argument.
 * Be careful when retrieving `defaultValue` or any other last param.
 *
 * use:
 * if (typeof defaultValue === 'object') {
 *   defaultValue = '';
 * }
 *
 * or:
 * args[args.length - 1]
 */
exports.Helpers = {
    repeat: function (min, max, options) {
        let content = '';
        let count = 0;
        const data = Object.assign({}, options);
        if (arguments.length === 3) {
            // If given two numbers then pick a random one between the two
            count = utils_1.RandomInt(min, max);
        }
        else if (arguments.length === 2) {
            // If given one number then just use it as a fixed repeat total
            options = max;
            count = min;
        }
        else {
            throw new Error('The repeat helper requires a numeric param');
        }
        for (let i = 0; i < count; i++) {
            // You can access these in your template using @index, @total, @first, @last
            data.index = i;
            data.total = count;
            data.first = i === 0;
            data.last = i === count - 1;
            // By using 'this' as the context the repeat block will inherit the current scope
            content = content + options.fn(this, { data });
            if (options.hash.comma !== false) {
                // Trim any whitespace left by handlebars and add a comma if it doesn't already exist,
                // also trim any trailing commas that might be at the end of the loop
                content = content.trimRight();
                if (i < count - 1 && content.charAt(content.length - 1) !== ',') {
                    content += ',';
                }
                else if (i === count - 1 &&
                    content.charAt(content.length - 1) === ',') {
                    content = content.slice(0, -1);
                }
                content += os_1.EOL;
            }
        }
        return content;
    },
    // return one random item
    oneOf: function (itemList) {
        return itemList[utils_1.RandomInt(0, itemList.length - 1)];
    },
    // return some random item as an array (to be used in triple braces) or as a string
    someOf: function (itemList, min, max, asArray = false) {
        const randomItems = itemList
            .sort(() => 0.5 - Math.random())
            .slice(0, utils_1.RandomInt(min, max));
        if (asArray === true) {
            return `["${randomItems.join('","')}"]`;
        }
        return randomItems;
    },
    // create an array
    array: function (...args) {
        // remove last item (handlebars options argument)
        return args.slice(0, args.length - 1);
    },
    // switch cases
    switch: function (value, options) {
        options.data.found = false;
        options.data.switchValue =
            value instanceof handlebars_1.SafeString ? value.toString() : value;
        const htmlContent = options.fn(options);
        return htmlContent;
    },
    // case helper for switch
    case: function (value, options) {
        // check switch value to simulate break
        if (value.toString() === options.data.switchValue && !options.data.found) {
            options.data.found = true;
            return options.fn(options);
        }
    },
    // default helper for switch
    default: function (options) {
        // if there is still a switch value show default content
        if (!options.data.found) {
            delete options.data.switchValue;
            return options.fn(options);
        }
    },
    // provide current time with format
    now: function (format) {
        return date_fns_1.format(new Date(), typeof format === 'string' ? format : "yyyy-MM-dd'T'HH:mm:ss.SSSxxx", {
            useAdditionalWeekYearTokens: true,
            useAdditionalDayOfYearTokens: true
        });
    },
    // converts the input to a base64 string
    base64: function (...args) {
        const hbsOptions = args[args.length - 1];
        let content;
        if (args.length === 1) {
            content = hbsOptions.fn(hbsOptions);
        }
        else {
            content = args[0];
        }
        // convert content toString in case we pass a SafeString from another helper
        return new handlebars_1.SafeString(utils_1.ToBase64(content.toString()));
    },
    // adds a newline to the output
    newline: function () {
        return '\n';
    },
    // returns a compatible ObjectId
    // * if value is undefined or null returns a random ObjectId
    // * if value is defined is used a seed, can be a string, number or Buffer
    objectId: function (defaultValue) {
        if (typeof defaultValue === 'object') {
            defaultValue = undefined;
        }
        return new bson_objectid_1.default(defaultValue).toHexString();
    },
    // concat multiple string and/or variables (like @index)
    concat: function (...args) {
        // remove handlebars options
        const toConcat = args.slice(0, args.length - 1);
        return toConcat.join('');
    },
    // Shift a date and time by a specified ammount.
    dateTimeShift: function (options) {
        let date;
        let format;
        if (typeof options === 'object' && options.hash) {
            date = utils_1.fromSafeString(options.hash['date']);
            format = utils_1.fromSafeString(options.hash['format']);
        }
        // If no date is specified, default to now. If a string is specified, then parse it to a date.
        const dateToShift = date === undefined
            ? new Date()
            : typeof date === 'string'
                ? new Date(date)
                : date;
        if (typeof options === 'object' && options !== null && options.hash) {
            if (typeof options.hash['days'] === 'number') {
                dateToShift.setDate(dateToShift.getDate() + options.hash['days']);
            }
            if (typeof options.hash['months'] === 'number') {
                dateToShift.setMonth(dateToShift.getMonth() + options.hash['months']);
            }
            if (typeof options.hash['years'] === 'number') {
                dateToShift.setFullYear(dateToShift.getFullYear() + options.hash['years']);
            }
            if (typeof options.hash['hours'] === 'number') {
                dateToShift.setHours(dateToShift.getHours() + options.hash['hours']);
            }
            if (typeof options.hash['minutes'] === 'number') {
                dateToShift.setMinutes(dateToShift.getMinutes() + options.hash['minutes']);
            }
            if (typeof options.hash['seconds'] === 'number') {
                dateToShift.setSeconds(dateToShift.getSeconds() + options.hash['seconds']);
            }
        }
        return date_fns_1.format(dateToShift, typeof format === 'string' ? format : "yyyy-MM-dd'T'HH:mm:ss.SSSxxx", {
            useAdditionalWeekYearTokens: true,
            useAdditionalDayOfYearTokens: true
        });
    },
    // Get's the index of a search string within another string.
    indexOf: function (data, search, position) {
        data =
            typeof data === 'object' && !(data instanceof handlebars_1.SafeString)
                ? ''
                : data.toString();
        search =
            (typeof search === 'object' || typeof search === 'undefined') &&
                !(search instanceof handlebars_1.SafeString)
                ? ''
                : search.toString();
        position =
            (typeof position === 'object' || typeof position === 'undefined') &&
                !(position instanceof handlebars_1.SafeString)
                ? undefined
                : Number(position.toString());
        if (typeof position === 'number') {
            return data.indexOf(search, position);
        }
        else {
            return data.indexOf(search);
        }
    },
    // Returns if the provided search string is contained in the data string.
    includes: function (data, search) {
        data =
            (typeof data === 'object' || typeof data == 'undefined') &&
                !(data instanceof handlebars_1.SafeString)
                ? ''
                : data.toString();
        search =
            (typeof search === 'object' || typeof search == 'undefined') &&
                !(search instanceof handlebars_1.SafeString)
                ? ''
                : search.toString();
        return data.includes(search);
    },
    // Returns the substring of a string based on the passed in starting index and length.
    substr: function (data, from, length) {
        data =
            typeof data === 'object' && !(data instanceof handlebars_1.SafeString)
                ? ''
                : data.toString();
        const fromValue = (typeof from === 'object' || typeof from == 'undefined') &&
            !(from instanceof handlebars_1.SafeString)
            ? 0
            : Number(from.toString());
        const lengthValue = (typeof length === 'object' || typeof length == 'undefined') &&
            !(length instanceof handlebars_1.SafeString)
            ? undefined
            : Number(length.toString());
        if (typeof lengthValue !== 'undefined') {
            return data.substr(fromValue, lengthValue);
        }
        else {
            return data.substr(fromValue);
        }
    },
    // Split a string, default separator is " "
    split: function (...args) {
        const parameters = args.slice(0, -1);
        if (parameters.length === 0) {
            return '';
        }
        const data = parameters[0];
        let separator;
        if (parameters.length >= 2) {
            separator = parameters[1];
        }
        if (!separator || typeof separator !== 'string') {
            separator = ' ';
        }
        if (!data || typeof data !== 'string') {
            return '';
        }
        return data.split(separator);
    },
    // set a variable to be used in the template
    setVar: function (name, value, options) {
        if (typeof name === 'object') {
            return;
        }
        // return if no value provided
        if ((typeof value === 'object' && !(value instanceof handlebars_1.SafeString)) ||
            !value) {
            return;
        }
        // we are at the root level
        if (options.data.root) {
            options.data.root[name] = value;
        }
        else {
            options.data[name] = value;
        }
    },
    int: function (...args) {
        const options = {
            precision: 1
        };
        if (args.length >= 2 && typeof args[0] === 'number') {
            options.min = args[0];
        }
        if (args.length >= 3 && typeof args[1] === 'number') {
            options.max = args[1];
        }
        return faker_1.default.random.number(options);
    },
    float: function (...args) {
        const options = {
            precision: Math.pow(10, -10)
        };
        if (args.length >= 2 && typeof args[0] === 'number') {
            options.min = args[0];
        }
        if (args.length >= 3 && typeof args[1] === 'number') {
            options.max = args[1];
        }
        return faker_1.default.random.number(options);
    },
    date: function (...args) {
        let from, to, format;
        if (args.length >= 3 &&
            typeof args[0] === 'string' &&
            typeof args[1] === 'string') {
            from = args[0];
            to = args[1];
            const randomDate = faker_1.default.date.between(from, to);
            if (args.length === 4 && typeof args[2] === 'string') {
                format = args[2];
                return date_fns_1.format(randomDate, format, {
                    useAdditionalWeekYearTokens: true,
                    useAdditionalDayOfYearTokens: true
                });
            }
            return randomDate.toString();
        }
        return '';
    },
    time: function (...args) {
        let from, to, format;
        if (args.length >= 3 &&
            typeof args[0] === 'string' &&
            typeof args[1] === 'string') {
            from = `1970-01-01T${args[0]}`;
            to = `1970-01-01T${args[1]}`;
            if (args.length === 4 && typeof args[2] === 'string') {
                format = args[2];
            }
            return date_fns_1.format(faker_1.default.date.between(from, to), format || 'HH:mm', {
                useAdditionalWeekYearTokens: true,
                useAdditionalDayOfYearTokens: true
            });
        }
        return '';
    },
    boolean: function () {
        return faker_1.default.random.boolean();
    },
    title: function () {
        return faker_1.default.name.prefix();
    },
    firstName: function () {
        return faker_1.default.name.firstName();
    },
    lastName: function () {
        return faker_1.default.name.lastName();
    },
    company: function () {
        return faker_1.default.company.companyName();
    },
    domain: function () {
        return faker_1.default.internet.domainName();
    },
    tld: function () {
        return faker_1.default.internet.domainSuffix();
    },
    email: function () {
        return faker_1.default.internet.email();
    },
    street: function () {
        return faker_1.default.address.streetAddress();
    },
    city: function () {
        return faker_1.default.address.city();
    },
    country: function () {
        return faker_1.default.address.country();
    },
    countryCode: function () {
        return faker_1.default.address.countryCode();
    },
    zipcode: function () {
        return faker_1.default.address.zipCode();
    },
    postcode: function () {
        return faker_1.default.address.zipCode();
    },
    lat: function () {
        return faker_1.default.address.latitude();
    },
    long: function () {
        return faker_1.default.address.longitude();
    },
    phone: function () {
        return faker_1.default.phone.phoneNumber();
    },
    color: function () {
        return faker_1.default.commerce.color();
    },
    hexColor: function () {
        return Math.floor(faker_1.default.random.number({ min: 0, max: 1, precision: Math.pow(10, -16) }) *
            16777215).toString(16);
    },
    guid: function () {
        return faker_1.default.random.uuid();
    },
    ipv4: function () {
        return faker_1.default.internet.ip();
    },
    ipv6: function () {
        return faker_1.default.internet.ipv6();
    },
    lorem: function (...args) {
        let count;
        if (args.length >= 2 && typeof args[0] === 'number') {
            count = args[0];
        }
        return faker_1.default.lorem.sentence(count);
    },
    // Handlebars hook when a helper is missing
    helperMissing: function () {
        return '';
    },
    // Maths helpers
    add: function (...args) {
        // Check if there are parameters
        if (args.length === 1) {
            return '';
        }
        return args.reduce((sum, item, index) => {
            if (!isNaN(Number(utils_1.fromSafeString(item))) && index !== args.length - 1) {
                return Number(sum) + Number(item);
            }
            else {
                return Number(sum);
            }
        });
    },
    subtract: function (...args) {
        // Check if there are parameters
        if (args.length === 1) {
            return '';
        }
        return args.reduce((sum, item, index) => {
            if (!isNaN(Number(utils_1.fromSafeString(item))) && index !== args.length - 1) {
                return Number(sum) - Number(item);
            }
            else {
                return Number(sum);
            }
        });
    },
    multiply: function (...args) {
        // Check if there are parameters
        if (args.length === 1) {
            return '';
        }
        return args.reduce((sum, item, index) => {
            if (!isNaN(Number(utils_1.fromSafeString(item))) && index !== args.length - 1) {
                return Number(sum) * Number(item);
            }
            else {
                return Number(sum);
            }
        });
    },
    divide: function (...args) {
        // Check if there are parameters
        if (args.length === 1) {
            return '';
        }
        return args.reduce((sum, item, index) => {
            if (!isNaN(Number(utils_1.fromSafeString(item))) &&
                index !== args.length - 1 &&
                Number(item) !== 0) {
                return Number(sum) / Number(item);
            }
            else {
                return Number(sum);
            }
        });
    },
    modulo: function (...args) {
        const parameters = args.slice(0, -1);
        // Check if there are parameters or if attempting to compute modulo 0
        if (parameters.length <= 1 || Number(parameters[1]) === 0) {
            return '';
        }
        return Number(parameters[0]) % Number(parameters[1]);
    },
    ceil: function (...args) {
        const parameters = args.slice(0, -1);
        // Check if there are parameters
        if (parameters.length === 0) {
            return '';
        }
        return Math.ceil(Number(parameters[0]));
    },
    floor: function (...args) {
        const parameters = args.slice(0, -1);
        // Check if there are parameters
        if (parameters.length === 0) {
            return '';
        }
        return Math.floor(Number(parameters[0]));
    }
};
//# sourceMappingURL=helpers.js.map