"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakerWrapper = void 0;
const faker_1 = __importDefault(require("faker"));
const handlebars_1 = require("handlebars");
const utils_1 = require("../utils");
exports.FakerWrapper = {
    faker: function (...args) {
        const hbsOptions = args[args.length - 1];
        let fakerName;
        if (args.length === 1) {
            fakerName = '';
        }
        else {
            fakerName = args[0];
        }
        const [fakerPrimaryMethod, fakerSecondaryMethod] = fakerName.split('.');
        let errorMessage = `${fakerName} is not a valid Faker method`;
        // check faker helper name pattern
        if (!fakerName ||
            !fakerName.match(/^[a-z]+\.[a-z]+$/i) ||
            !fakerPrimaryMethod ||
            !fakerSecondaryMethod ||
            !faker_1.default[fakerPrimaryMethod] ||
            !faker_1.default[fakerPrimaryMethod][fakerSecondaryMethod]) {
            if (!fakerName) {
                errorMessage = 'Faker method name is missing';
            }
            throw new Error(`${errorMessage} (valid: "address.zipCode", "date.past", etc) line ${hbsOptions.loc &&
                hbsOptions.loc &&
                hbsOptions.loc.start &&
                hbsOptions.loc.start.line}`);
        }
        const fakerFunction = faker_1.default[fakerPrimaryMethod][fakerSecondaryMethod];
        const fakerArgs = args.slice(1, args.length - 1);
        // push hbs named parameters (https://handlebarsjs.com/guide/block-helpers.html#hash-arguments) to Faker
        if (!utils_1.IsEmpty(hbsOptions.hash)) {
            fakerArgs.push(hbsOptions.hash);
        }
        let fakedContent = fakerFunction(...fakerArgs);
        // do not stringify Date coming from Faker.js
        if ((Array.isArray(fakedContent) || typeof fakedContent === 'object') &&
            !(fakedContent instanceof Date)) {
            fakedContent = JSON.stringify(fakedContent);
        }
        return new handlebars_1.SafeString(fakedContent);
    }
};
//# sourceMappingURL=faker-wrapper.js.map