"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHelpers = void 0;
const handlebars_1 = require("handlebars");
const object_path_1 = require("object-path");
const RequestHelpers = function (request, environment) {
    return {
        // get json property from body
        body: function (path, defaultValue, stringify) {
            // no path provided
            if (typeof path === 'object') {
                path = '';
            }
            // no default value provided
            if (typeof defaultValue === 'object') {
                defaultValue = '';
            }
            // no value for stringify provided
            if (typeof stringify === 'object') {
                stringify = false;
            }
            // if no path has been provided we want the full raw body as is
            if (!path) {
                return new handlebars_1.SafeString(request.body);
            }
            let requestToParse;
            if (request.parsedBody) {
                requestToParse = request.parsedBody;
            }
            else {
                return new handlebars_1.SafeString(stringify ? JSON.stringify(defaultValue) : defaultValue);
            }
            let value = object_path_1.get(requestToParse, path);
            value = value === undefined ? defaultValue : value;
            if (Array.isArray(value) || typeof value === 'object') {
                stringify = true;
            }
            return new handlebars_1.SafeString(stringify ? JSON.stringify(value) : value);
        },
        // get the raw json property from body to use with each for example
        bodyRaw: function (...args) {
            let path = '';
            let defaultValue = '';
            const parameters = args.slice(0, -1); // remove last item (handlebars options argument)
            if (parameters.length === 1) {
                path = parameters[0];
            }
            else if (parameters.length >= 2) {
                path = parameters[0];
                defaultValue = parameters[1];
            }
            // if no path has been provided we want the full raw body as is
            if (!path) {
                return request.body;
            }
            let requestToParse;
            if (request.parsedBody) {
                requestToParse = request.parsedBody;
            }
            else {
                return defaultValue;
            }
            let value = object_path_1.get(requestToParse, path);
            value = value === undefined ? defaultValue : value;
            return value;
        },
        // use params from url /:param1/:param2
        urlParam: function (paramName) {
            return request.params[paramName];
        },
        // use params from query string ?param1=xxx&param2=yyy
        queryParam: function (path, defaultValue, stringify) {
            // no path provided
            if (typeof path === 'object') {
                path = '';
            }
            // no default value provided
            if (typeof defaultValue === 'object' || !defaultValue) {
                defaultValue = '';
            }
            // no value for stringify provided
            if (typeof stringify === 'object') {
                stringify = false;
            }
            if (!request.query) {
                return new handlebars_1.SafeString(stringify ? JSON.stringify(defaultValue) : defaultValue);
            }
            // if no path has been provided we want the full query string object as is
            if (!path) {
                return new handlebars_1.SafeString(JSON.stringify(request.query));
            }
            let value = object_path_1.get(request.query, path);
            value = value === undefined ? defaultValue : value;
            if (Array.isArray(value) || typeof value === 'object') {
                stringify = true;
            }
            return new handlebars_1.SafeString(stringify ? JSON.stringify(value) : value);
        },
        // use raw params from query string ?param1=xxx&param2=yyy
        queryParamRaw: function (...args) {
            let path = '';
            let defaultValue = '';
            const parameters = args.slice(0, -1); // remove last item (handlebars options argument)
            if (parameters.length === 1) {
                path = parameters[0];
            }
            else if (parameters.length >= 2) {
                path = parameters[0];
                defaultValue = parameters[1];
            }
            if (!request.query) {
                return defaultValue;
            }
            // if no path has been provided we want the full raw query string object as is
            if (!path) {
                return request.query;
            }
            let value = object_path_1.get(request.query, path);
            value = value === undefined ? defaultValue : value;
            return value;
        },
        // use content from request header
        header: function (headerName, defaultValue) {
            if (typeof defaultValue === 'object') {
                defaultValue = '';
            }
            if (typeof headerName === 'object') {
                return defaultValue;
            }
            return request.get(headerName) || defaultValue;
        },
        // use value of cookie
        cookie: function (key, defaultValue) {
            if (typeof defaultValue === 'object') {
                defaultValue = '';
            }
            return request.cookies[key] || defaultValue;
        },
        // use request baseUrl
        baseUrl: function () {
            const prefix = environment.endpointPrefix
                ? `/${environment.endpointPrefix}`
                : '';
            const protocol = environment.https ? 'https' : 'http';
            return `${protocol}://${request.hostname}:${environment.port}${prefix}`;
        },
        // use request hostname
        hostname: function () {
            return request.hostname;
        },
        // use request ip
        ip: function () {
            return request.ip;
        },
        // use request method
        method: function () {
            return request.method;
        }
    };
};
exports.RequestHelpers = RequestHelpers;
//# sourceMappingURL=request-helpers.js.map