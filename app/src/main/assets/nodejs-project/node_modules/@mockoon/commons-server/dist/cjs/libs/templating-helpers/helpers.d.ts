import { HelperOptions, SafeString } from 'handlebars';
/**
 * Handlebars may insert its own `options` object as the last argument.
 * Be careful when retrieving `defaultValue` or any other last param.
 *
 * use:
 * if (typeof defaultValue === 'object') {
 *   defaultValue = '';
 * }
 *
 * or:
 * args[args.length - 1]
 */
export declare const Helpers: {
    repeat: (min: number, max: number, options: HelperOptions | any) => string;
    oneOf: (itemList: string[]) => string;
    someOf: (itemList: string[], min: number, max: number, asArray?: boolean) => string | string[];
    array: (...args: any[]) => any[];
    switch: (value: any, options: HelperOptions) => string;
    case: (value: any, options: HelperOptions) => string | undefined;
    default: (options: HelperOptions) => string | undefined;
    now: (format: any) => string;
    base64: (...args: any[]) => SafeString;
    newline: () => string;
    objectId: (defaultValue: any) => string;
    concat: (...args: any[]) => string;
    dateTimeShift: (options: HelperOptions) => string;
    indexOf: (data: string | SafeString | HelperOptions, search: string | SafeString | HelperOptions | undefined, position?: number | string | SafeString | HelperOptions | undefined) => number;
    includes: (data: string | SafeString | HelperOptions, search: string | SafeString | HelperOptions | undefined) => boolean;
    substr: (data: string | SafeString | HelperOptions, from: number | string | SafeString | HelperOptions | undefined, length: number | string | SafeString | HelperOptions | undefined) => string;
    split: (...args: any[]) => "" | string[];
    setVar: (name: string, value: string | number | SafeString | HelperOptions, options: HelperOptions) => void;
    int: (...args: any[]) => number;
    float: (...args: any[]) => number;
    date: (...args: any[]) => string;
    time: (...args: any[]) => string;
    boolean: () => boolean;
    title: () => string;
    firstName: () => string;
    lastName: () => string;
    company: () => string;
    domain: () => string;
    tld: () => string;
    email: () => string;
    street: () => string;
    city: () => string;
    country: () => string;
    countryCode: () => string;
    zipcode: () => string;
    postcode: () => string;
    lat: () => string;
    long: () => string;
    phone: () => string;
    color: () => string;
    hexColor: () => string;
    guid: () => string;
    ipv4: () => string;
    ipv6: () => string;
    lorem: (...args: any[]) => string;
    helperMissing: () => string;
    add: (...args: any[]) => any;
    subtract: (...args: any[]) => any;
    multiply: (...args: any[]) => any;
    divide: (...args: any[]) => any;
    modulo: (...args: any[]) => number | "";
    ceil: (...args: any[]) => number | "";
    floor: (...args: any[]) => number | "";
};
